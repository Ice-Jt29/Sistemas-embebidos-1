#include <stdio.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "driver/gpio.h"
#include "esp_timer.h"

#define BTN_INC  14   // Pulsador incremento
#define BTN_DEC  27   // Pulsador decremento
#define LED_PIN   2   // LED integrado ESP32 o externo

#define PASO      1   
#define MAX_VAL  20
#define MIN_VAL   0

int CONTEO = 0;

// Estados previos
int prevIncState = 1;
int prevDecState = 1;

// Variables LED temporizado
bool ledActive = false;
int64_t ledOnTime = 0;

// --- Función anti-rebote (retorna 1 si hay flanco positivo válido) ---
int readButtonDebounced(gpio_num_t pin, int *prevState) {
    static int64_t lastChangeTimeInc = 0;
    static int64_t lastChangeTimeDec = 0;

    int currState = gpio_get_level(pin);
    int64_t now = esp_timer_get_time() / 1000; // ms

    int64_t *lastChangeTime = (pin == BTN_INC) ? &lastChangeTimeInc : &lastChangeTimeDec;

    if (currState != *prevState) {
        if ((now - *lastChangeTime) > 30) { // 30 ms de estabilidad
            if (*prevState == 0 && currState == 1) {
                *prevState = currState;
                *lastChangeTime = now;
                return 1; // flanco positivo válido
            }
            *prevState = currState;
            *lastChangeTime = now;
        }
    }
    return 0;
}

void app_main(void) {
    // Configurar pines
    gpio_reset_pin(BTN_INC);
    gpio_set_direction(BTN_INC, GPIO_MODE_INPUT);
    gpio_pullup_en(BTN_INC);

    gpio_reset_pin(BTN_DEC);
    gpio_set_direction(BTN_DEC, GPIO_MODE_INPUT);
    gpio_pullup_en(BTN_DEC);

    gpio_reset_pin(LED_PIN);
    gpio_set_direction(LED_PIN, GPIO_MODE_OUTPUT);

    while (1) {
        // Incremento
        if (readButtonDebounced(BTN_INC, &prevIncState)) {
            if (CONTEO <= MAX_VAL - PASO) {
                CONTEO += PASO;
            } else {
                CONTEO = MAX_VAL;
            }
            printf("{\"contador\": %d}\n", CONTEO);
        }

        // Decremento
        if (readButtonDebounced(BTN_DEC, &prevDecState)) {
            if (CONTEO >= MIN_VAL + PASO) {
                CONTEO -= PASO;
            } else {
                CONTEO = MIN_VAL;
            }
            printf("{\"contador\": %d}\n", CONTEO);
        }

        // LED ON cuando contador == 10
        if (CONTEO == 10 && !ledActive) {
            gpio_set_level(LED_PIN, 1);
            ledOnTime = esp_timer_get_time();
            ledActive = true;
        }

        // LED OFF después de 4s
        if (ledActive && (esp_timer_get_time() - ledOnTime) >= 4000000) {
            gpio_set_level(LED_PIN, 0);
            ledActive = false;
        }

        vTaskDelay(10 / portTICK_PERIOD_MS);
    }
}
